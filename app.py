from aiogram.types import ContentType, InputFile, Message

from config import log
from aiogram import Dispatcher

from config import owner_id
from filters.ref import IsRef
from filters.triggers import Trigger
from filters.admin import IsOwner, IsBot
from filters.users import IsPremium, IsAdmin, IsBan
from handlers.admins.ban import ban_user_handler
from handlers.admins.obnyl import obnyn_handler
from handlers.admins.promo import promo_handler
from handlers.admins.rass import (
    rass_menu_handler,
    rass_step2_handler,
    rass_step3_handler,
    rass_finish_handler,
)
from handlers.bot import bot_added_to_chat
from handlers.users.bitcoin.main import (
    bitcoin_handler,
    videocards_handler,
    ferma_handler,
)
from handlers.users.bonus import bonus_handler
from handlers.users.bosses.main import bosses_handler
from handlers.users.businesses.businesses import business_handler
from handlers.users.cars.airplanes import airplanes_handler
from handlers.users.cars.cars import cars_handler
from handlers.users.cars.moto import moto_handler
from handlers.users.cars.rockets import rocket_handler
from handlers.users.cars.tanki import tanki_handler
from handlers.users.cars.vertoleti import vertoleti_handler
from handlers.users.cars.yaxti import yaxti_handler
from handlers.users.cash.bank import bank_handler, credit_handler
from handlers.users.cash.deposit import deposit_handler
from handlers.users.cash.euro import euro_handler
from handlers.users.cash.rob import rob_handler, shield_handler
from handlers.users.cash.uah import uah_handler
from handlers.users.countries.army import (
    army_handler,
    army_tech_handler,
    army_rockets_handler,
    army_snaraj_handler,
    army_gotov_handler,
)
from handlers.users.countries.main import countries_handler, country_create_handler
from handlers.users.countries.my import (
    my_country_handler,
    join_country_handler,
    leave_country_handler,
)
from handlers.users.countries.owners import (
    get_country_handler,
    leave_from_country_handler,
    snyat_budget_country,
    give_budget_country,
)
from handlers.users.countries.soyuz import soyuz_handler, cancel_soyuz_handler
from handlers.users.countries.wars import wars_handler, cancel_wars_handler
from handlers.users.donate import (
    donate_handler,
    zadonatit_handler,
    obmen_handler,
    percent_buy_handler,
    cobmen_handler,
    other_method_handler,
    Payok,
    payok_step1,
    Freekassa,
    freekassa_handler,
    payok_handler,
    freekassa_step1,
    payok_check,
)
from handlers.users.exceptions import errors_handler
from handlers.users.games.bowling import bowling_handler
from handlers.users.games.cases import cases_handler
from handlers.users.games.cnb import cnb_handler
from handlers.users.games.darts import darts_handler
from handlers.users.games.nvuti import nvuti_handler
from handlers.users.games.oreshka import oreshka_handler
from handlers.users.games.roulette import roulette_handler
from handlers.users.games.casino import casino_handler
from handlers.users.games.dice import dice_handler
from handlers.users.houses.houses import house_handler
from handlers.users.items import item_handler
from handlers.users.jobs.jobs import jobs_handler
from handlers.users.main import start_handler, help_handler, help_call_handler
from rich import print

from handlers.users.marries import marry_handler, marry_call_handler
from handlers.users.me import (
    balance_handler,
    nickname_handler,
    notifies_handler,
    profile_handler,
    nedavno_handler,
)
from handlers.users.cash.pay import pay_handler
from handlers.users.nalogs import nalogs_handler, autonalog_handler
from handlers.users.pets import pets_handler
from handlers.users.prefixes import prefix_handler
from handlers.users.promo import activatepromo_handler
from handlers.users.ref import refferal_handler
from handlers.users.rp import emojis, rp_commands_handler
from handlers.users.shop.users import users_shop_handler
from handlers.users.top import top_handler
from handlers.users.works.bottles import bottles_handler
from handlers.users.works.mine import mine_handler
from handlers.users.works.zavod import zavod_handler
from keyboard.main import remove
from states.admins import Rass, ABD
from utils.freekassa import start
from utils.main.users import all_users
from utils.main.chats import all_chats
from handlers.admins.main import (
    givebalance_handler,
    stats_handler,
    plan_bd,
    plan_bd_step1,
    plan_bd_finish,
    plan_bd_step2,
    givedonate_handler,
    privilegia_handler_admin,
    givebalance_admin_handler,
    stats_dop_call,
    get_chat_list,
)
from threading import Thread


async def on_shutdown(dp: Dispatcher):
    print("[red]Bot finished! [blue][‚Ä¢-‚Ä¢][/blue]")


async def on_startup(dp: Dispatcher):
    print("[green]Bot started! [blue][‚Ä¢-‚Ä¢][/blue]")
    await register_handlers(dp)
    Thread(target=start).start()
    if log:
        try:
            await dp.bot.send_message(
                chat_id=owner_id,
                text=f"<b>ü™Ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b> "
                f'<code>{datetime.now().strftime("%d.%m.%y %H:%M:%S")}</code>\n\n'
                f"<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ:</b> <code>{len(all_users())}</code>\n"
                f"<b>üõñ –ß–∞—Ç–æ–≤ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –±–æ—Ç:</b> <code>"
                f"{len(all_chats())}</code>",
            )
        except Exception as e:
            print(e)


async def calc_handler(message):
    return


from io import StringIO
from contextlib import redirect_stdout


async def eval_handler(message):
    code = message.text.replace("/eval", "").strip()
    try:
        f = StringIO()
        with redirect_stdout(f):
            exec(code)
        out = f.getvalue()
        return await message.reply(str(out).replace("<", "").replace(">", ""))
    except Exception as ex:
        return await message.reply(str(ex).replace(">", "").replace("<", ""))


async def channel_handler(message):
    return


async def cancel_handler(m, state):
    await state.finish()
    return await m.reply(text="–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=remove)


async def echo_handler(m):
    message = m.reply_to_message
    return await message.send_copy(m.from_user.id)


from datetime import datetime
from pytz import timezone


async def time_handler(m):
    kiev = datetime.now()
    moscow = kiev.astimezone(timezone("Europe/Moscow"))
    omsk = kiev.astimezone(timezone("Etc/GMT-6"))

    text = "‚Ä¢-‚Ä¢ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤:\n\n"

    array = {"–ö–∏–µ–≤": kiev, "–ú–æ—Å–∫–≤–∞": moscow, "–û–º—Å–∫": omsk}

    for name, timer in array.items():
        time = timer.strftime("%d.%m.%y %H:%M:%S")
        text += f"<b>{name}</b> ‚Äî <code>{time}</code>\n"

    return await m.reply(text)


async def logs_handler(message: Message):
    try:
        return await message.reply_document(
            document=InputFile(f'assets/logs/{datetime.now().strftime("%d.%m.%y")}.log')
        )
    except:
        return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏.")


async def ban_handler(message: Message):
    if message.chat.id == message.from_user.id:
        return await message.reply("‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")


async def register_handlers(dp: Dispatcher):
    # Channel pass
    dp.register_message_handler(
        channel_handler,
        lambda m: m.from_user.id in [777000, 136817688] or m.forward_from,
    )

    dp.register_message_handler(cancel_handler, text="‚ùå", state="*")

    dp.register_message_handler(ban_user_handler, Trigger(["ban", "unban"]), IsOwner())
    dp.register_message_handler(ban_handler, IsBan(), content_types="text", state="*")

    # Adminka
    dp.register_message_handler(
        promo_handler, IsOwner(), commands=["promo", "gift", "promocode"]
    )
    dp.register_message_handler(
        givebalance_handler, IsOwner(), Trigger(["–≤—ã–¥–∞—Ç—å", "give"])
    )

    dp.register_message_handler(
        givebalance_admin_handler, Trigger(["–≤—ã–¥–∞—Ç—å", "give"]), IsAdmin()
    )

    dp.register_message_handler(eval_handler, Trigger(["eval"]), IsOwner())
    dp.register_message_handler(logs_handler, Trigger(["logs"]), IsOwner())
    dp.register_message_handler(obnyn_handler, Trigger(["–æ–±–Ω—É–ª–±–æ—Ç–∞"]), IsOwner())

    dp.register_message_handler(
        stats_handler, IsOwner(), Trigger(["—Å—Ç–∞—Ç–∞", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stat", "stats"])
    )

    dp.register_message_handler(
        stats_handler, Trigger(["—Å—Ç–∞—Ç–∞", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stat", "stats"]), IsPremium()
    )

    dp.register_callback_query_handler(
        stats_dop_call, IsOwner(), text="statsdop", state="*"
    )

    dp.register_callback_query_handler(
        stats_dop_call, IsPremium(), text="statsdop", state="*"
    )

    dp.register_callback_query_handler(
        rass_menu_handler, IsOwner(), text_startswith="rass_"
    )
    dp.register_message_handler(
        rass_step2_handler, IsOwner(), content_types=ContentType.ANY, state=Rass.post
    )
    dp.register_message_handler(
        rass_step3_handler, IsOwner(), content_types="text", state=Rass.kb
    )
    dp.register_message_handler(
        rass_finish_handler, IsOwner(), content_types="text", state=Rass.time
    )

    dp.register_callback_query_handler(
        get_chat_list, IsOwner(), text="allchats", state="*"
    )

    dp.register_callback_query_handler(plan_bd, IsOwner(), text="plan", state="*")
    dp.register_message_handler(plan_bd_step1, IsOwner(), state=ABD.start)
    dp.register_message_handler(plan_bd_step2, IsOwner(), state=ABD.step_1)
    dp.register_message_handler(plan_bd_finish, IsOwner(), state=ABD.step_2)

    dp.register_message_handler(
        givedonate_handler, IsOwner(), Trigger(["gdonate", "–¥–¥–æ–Ω–∞—Ç", "–≥–¥–æ–Ω–∞—Ç"])
    )
    dp.register_message_handler(
        privilegia_handler_admin,
        IsOwner(),
        Trigger(["–¥–ø—Ä–∏–≤—É", "–≥–ø—Ä–∏–≤—É", "–¥–ø—Ä–∏–≤–∞", "–≥–ø—Ä–∏–≤–∞"]),
    )

    # Main commands
    dp.register_message_handler(echo_handler, commands="echo", state="*")

    dp.register_message_handler(
        bot_added_to_chat, IsBot(), content_types="new_chat_members"
    )
    dp.register_message_handler(start_handler, IsRef(), commands="start")
    dp.register_message_handler(
        start_handler, commands="start", commands_prefix=["!", "/", "."]
    )
    dp.register_message_handler(help_handler, Trigger(["–ø–æ–º–æ—â—å", "help"]))
    dp.register_callback_query_handler(
        help_call_handler, text_startswith="help_", state="*"
    )
    dp.register_message_handler(calc_handler, Trigger(["calc", "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å"]))

    # Exceptions
    dp.register_errors_handler(errors_handler)

    # Profile commands
    dp.register_message_handler(
        balance_handler, Trigger(["–±", "–±–∞–ª–∞–Ω—Å", "balance", "b"])
    )
    dp.register_message_handler(
        profile_handler, Trigger(["–ø—Ä–æ—Ñ–∏–ª—å", "me", "–ø—Ä–æ—Ñ–∞–π–ª", "–ø"])
    )
    dp.register_message_handler(
        nickname_handler, Trigger(["–Ω–∏–∫", "nick", "nickname", "name", "–Ω–∏–∫–Ω–µ–π–º"])
    )
    dp.register_message_handler(
        notifies_handler, Trigger(["—É–≤–µ–¥—ã", "notifies", "notify", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"])
    )

    # Top system
    dp.register_message_handler(top_handler, Trigger(["—Ç–æ–ø", "top"]))

    # Bank commands
    dp.register_message_handler(bank_handler, Trigger(["–±–∞–Ω–∫", "bank"]))
    dp.register_message_handler(credit_handler, Trigger(["–∫—Ä–µ–¥–∏—Ç", "credit", "–∑–∞–π–º"]))

    # Deposit commands
    dp.register_message_handler(
        deposit_handler, Trigger(["–¥–µ–ø", "–¥–µ–ø–æ–∑–∏—Ç", "dep", "deposit"])
    )

    # Pet commands
    dp.register_message_handler(
        pets_handler, Trigger(["pet", "pets", "–ø–∏—Ç–æ–º–µ—Ü", "–ø–∏—Ç–æ–º—Ü—ã", "–ø–µ—Ç", "–ø—ç—Ç"])
    )

    # Item commands
    dp.register_message_handler(
        item_handler,
        Trigger(
            [
                "–ø—Ä–µ–¥–º–µ—Ç",
                "–ø—Ä–µ–¥–º–µ—Ç—ã",
                "item",
                "items",
                "–∏–Ω–≤",
                "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                "inv",
                "inventory",
                "–ø—Ä–æ–¥–∞—Ç—å",
            ]
        ),
    )

    # Pay commands
    dp.register_message_handler(pay_handler, Trigger(["pay", "–ø–µ—Ä–µ–¥–∞—Ç—å", "–¥–∞—Ç—å"]))

    # Games
    #    –ö—É–±–∏–∫
    dp.register_message_handler(dice_handler, Trigger(["–∫—É–±–∏–∫", "dice"]))

    #    –ö–∞–∑–∏–Ω–æ
    dp.register_message_handler(casino_handler, Trigger(["–∫–∞–∑–∏–Ω–æ", "–∫–∞–∑–∏–∫", "casino"]))

    #    –†—É–ª–µ—Ç–∫–∞
    dp.register_message_handler(roulette_handler, Trigger(["–†—É–ª–µ—Ç–∫–∞", "roulette"]))

    #    Nvuti
    dp.register_message_handler(nvuti_handler, Trigger(["–Ω–≤—É—Ç–∏", "–±–º", "nvuti"]))

    #    –ö–µ–π—Å—ã
    dp.register_message_handler(
        cases_handler, Trigger(["–∫–µ–π—Å", "–∫–µ–π—Å—ã", "case", "cases"])
    )

    # Promo-code command
    dp.register_message_handler(
        activatepromo_handler, Trigger(["promo", "promocode", "–ø—Ä–æ–º–æ–∫–æ–¥", "–ø—Ä–æ–º–æ"])
    )

    # Bonus command
    dp.register_message_handler(
        bonus_handler, Trigger(["bonus", "–±–æ–Ω—É—Å", "gift", "–ø–æ–¥–∞—Ä–æ–∫"])
    )

    # Referral system
    dp.register_message_handler(refferal_handler, Trigger(["–†–µ—Ñ–µ—Ä–∞–ª–∫–∞", "Ref", "–†–µ—Ñ"]))

    # Houses system
    dp.register_message_handler(house_handler, Trigger(["–¥–æ–º", "house", "–¥–æ–º–∞"]))

    # Business system
    dp.register_message_handler(
        business_handler,
        Trigger(["–±–∏–∑–Ω–µ—Å", "–±–∏–∑–Ω–µ—Å—Å–∞", "–±–∏–∑–Ω–µ—Å–∞", "–±–∏–∑–Ω–µ—Å—Å", "business", "–±–∏–∑"]),
    )

    # Cars system
    dp.register_message_handler(
        cars_handler, Trigger(["car", "cars", "–º–∞—à–∏–Ω–∞", "–º–∞—à–∏–Ω—ã", "–∫–∞—Ä—Å", "–∫–∞—Ä"])
    )

    # Yaxti system
    dp.register_message_handler(yaxti_handler, Trigger(["—è—Ö—Ç–∞", "—è—Ö—Ç—ã"]))

    # Airplanes system
    dp.register_message_handler(
        airplanes_handler, Trigger(["airplane", "airplanes", "—Å–∞–º–æ–ª—ë—Ç", "—Å–∞–º–æ–ª—ë—Ç—ã"])
    )

    # Tanki system
    dp.register_message_handler(
        tanki_handler, Trigger(["—Ç–∞–Ω–∫–∏", "—Ç–∞–Ω–∫", "tank", "tanki"])
    )

    # Vertoleti system
    dp.register_message_handler(
        vertoleti_handler,
        Trigger(
            ["–≤–µ—Ä—Ç–æ–ª—ë—Ç", "–≤–µ—Ä—Ç—É—à–∫–∞", "–≤–µ—Ä—Ç—É—à–∫–∏", "–≤–µ—Ä—Ç–æ–ª—ë—Ç—ã", "–≤–µ—Ä—Ç–æ–ª–µ—Ç", "–≤–µ—Ä—Ç–æ–ª—ë—Ç—ã"]
        ),
    )

    # Moto system
    dp.register_message_handler(
        moto_handler, Trigger(["moto", "–º–æ—Ç–æ", "–º–æ—Ç–æ—Ü–∏–∫–ª", "motorcycle", "–º–æ—Ç–æ—Ü–∏–∫–ª—ã"])
    )

    # Mine system
    dp.register_message_handler(mine_handler, Trigger(["—à–∞—Ö—Ç–∞", "–∫–æ–ø–∞—Ç—å"]))

    # Zavod system
    dp.register_message_handler(zavod_handler, Trigger(["–∑–∞–≤–æ–¥", "—Ä–∞–±–æ—Ç–∞—Ç—å"]))

    # Job system
    dp.register_message_handler(
        jobs_handler,
        Trigger(
            [
                "job",
                "—Ä–∞–±–æ—Ç–∞",
                "jobs",
                "—Ä–∞–±–æ—Ç—ã",
                "–ø—Ä–æ—Ñ–µ—Å–∏—è",
                "–ø—Ä–æ—Ñ—Ñ–µ—Å–∏—è",
                "–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
                "–ø—Ä–æ—Ñ–µ—Å–∏–∏",
                "–ø—Ä–æ—Ñ—Ñ–µ—Å—Å–∏–∏",
                "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è",
            ]
        ),
    )

    # Family system
    dp.register_message_handler(
        marry_handler, Trigger(["marry", "—Å–µ–º—å—è", "–±—Ä–∞–∫", "–±—Ä–∞–∫–∏", "marries"])
    )
    dp.register_callback_query_handler(marry_call_handler, text_startswith="m")

    # Nalogs
    dp.register_message_handler(nalogs_handler, Trigger(["–Ω–∞–ª–æ–≥", "–Ω–∞–ª–æ–≥–∏"]))
    dp.register_message_handler(
        autonalog_handler,
        Trigger(
            ["–∞–≤—Ç–æ–Ω–∞–ª–æ–≥–∏", "–∞–≤—Ç–æ-–Ω–∞–ª–æ–≥–∏", "autonalogi", "autonalogs", "auto–Ω–∞–ª–æ–≥–∏"]
        ),
    )

    # Last
    dp.register_message_handler(
        nedavno_handler, Trigger(["–Ω–µ–¥–∞–≤–Ω–∏–µ", "–ø–æ—Å–ª–µ–¥–Ω–µ–µ", "–ª–æ–≥–∏", "–ª–∞—Å—Ç", "last"])
    )

    # Donate
    dp.register_message_handler(
        donate_handler,
        Trigger(
            [
                "donate",
                "–¥–æ–Ω–∞—Ç",
                "–∫—É–ø–∏—Ç—å",
                "–ø—Ä–∏–≤–∞",
                "–ø—Ä–∏–≤—ã",
                "–ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏",
                "–ø—Ä–∏–≤–∏–ª–µ–≥–∏—è",
                "–¥–æ–Ω–∞—Ç—ã",
                "donates",
                "donats",
            ]
        ),
    )
    dp.register_message_handler(zadonatit_handler, Trigger(["–∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å", "donatit"]))
    dp.register_message_handler(cobmen_handler, Trigger(["–∫–æ–±–º–µ–Ω", "–∫–æ–±–º–µ–Ω—è—Ç—å"]))
    dp.register_message_handler(obmen_handler, Trigger(["–æ–±–º–µ–Ω", "–æ–±–º–µ–Ω—è—Ç—å"]))
    dp.register_message_handler(percent_buy_handler, Trigger(["–ø—Ä–æ—Ü–µ–Ω—Ç", "percent"]))

    dp.register_callback_query_handler(zadonatit_handler, text="donate")

    dp.register_callback_query_handler(other_method_handler, text="donate_other")
    dp.register_callback_query_handler(payok_handler, text="donate_payok")
    dp.register_message_handler(payok_step1, state=Payok.start)
    dp.register_callback_query_handler(payok_check, state="*", text_startswith="check_")
    dp.register_callback_query_handler(freekassa_handler, text="donate_fk")
    dp.register_message_handler(freekassa_step1, state=Freekassa.start)

    #    # Moderation

    #    dp.register_message_handler(mute_handler, Trigger(['mute', '–º—É—Ç', '–º—å—é—Ç']))

    #    dp.register_message_handler(ban_handler, Trigger(['ban', '–±–∞–Ω']))

    #    dp.register_message_handler(unmute_handler, Trigger(['unmute', '–∞–Ω–º—É—Ç', '—Ä–∞–∑–º—É—Ç']))

    #    dp.register_message_handler(unban_handler, Trigger(['unban', '—Ä–∞–∑–±–∞–Ω', '–∞–Ω–±–∞–Ω']))

    #

    #    dp.register_callback_query_handler(unmute_handler, text_startswith='unmute', state='*', chat_type=['group',

    #

    # Oreshka
    dp.register_message_handler(oreshka_handler, Trigger(["–æ—Ä–µ—à–∫–∞", "—Ñ–ª–∏–ø", "flip"]))

    # Prefixes
    dp.register_message_handler(
        prefix_handler,
        Trigger(
            [
                "–ø—Ä–µ—Ñ",
                "–ø—Ä–µ—Ñ—ã",
                "–ø—Ä–µ—Ñ–∏–∫—Å—ã",
                "–ø—Ä–µ—Ñ–∏–∫—Å",
                "pref",
                "prefs",
                "prefix",
                "prefixes",
            ]
        ),
    )

    # Rockets
    dp.register_message_handler(
        rocket_handler, Trigger(["—Ä–∞–∫–µ—Ç–∞", "—Ä–∞–∫–µ—Ç—ã", "rocket", "rockets"])
    )

    # Bitcoin
    dp.register_message_handler(
        bitcoin_handler, Trigger(["btc", "–±–∏—Ç–∫–æ–∏–Ω", "–±—Ç—Å", "–±—Ç—Ü", "–±–∏—Ç–∫–æ–∏–Ω—ã"])
    )
    dp.register_message_handler(
        videocards_handler,
        Trigger(["–≤–∏–¥–µ–æ", "–≤–∏–¥–µ–æ–∫–∞—Ä—Ç", "–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞", "–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", "–≤–∏–¥—é—Ö–∞", "–≤–∏–¥—é—Ö–∏"]),
    )
    dp.register_message_handler(
        ferma_handler, Trigger(["—Ñ–µ—Ä–º–∞", "–º–∞–π–Ω–∏–Ω–≥", "ferma", "ferm", "—Ñ–µ—Ä–º—ã"])
    )
    dp.register_message_handler(bitcoin_handler, Trigger(["–∫—É—Ä—Å"]))

    # Rob
    dp.register_message_handler(
        rob_handler,
        Trigger(["rob", "–æ–≥—Ä–∞", "–æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ", "—É–∫—Ä–∞—Å—Ç—å", "–æ–≥—Ä–∞–±–∏—Ç—å", "–æ–≥—Ä–∞–±–∞"]),
    )
    dp.register_message_handler(shield_handler, Trigger(["—â–∏—Ç", "—â–∏—Ç—ã", "shield"]))

    # Bottles
    dp.register_message_handler(
        bottles_handler, Trigger(["–±—É—Ç—ã–ª–∫–∞", "–±—É—Ç—ã–ª–∫–∏", "bottles", "–±—É—Ç—ã–ª–∫"])
    )

    # Bowling
    dp.register_message_handler(
        bowling_handler, Trigger(["–±–æ—É–ª–∏–Ω–≥", "bow", "–±–æ—É", "–±–æ—É–ª–∏–Ω", "bowling"])
    )

    # Darts
    dp.register_message_handler(
        darts_handler, Trigger(["–¥–∞—Ä—Ç—Å", "dart", "–¥–∞—Ä—Ç", "darts"])
    )

    # KNB
    dp.register_message_handler(
        cnb_handler, Trigger(["cnb", "–∫–Ω–±", "–∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", "—Ü—É-–µ-—Ñ–∞"])
    )

    # Euro
    dp.register_message_handler(euro_handler, Trigger(["euro", "–µ–≤—Ä–æ", "—ç–≤—Ä–æ", "–µ—É—Ä–æ"]))
    dp.register_message_handler(
        uah_handler, Trigger(["–≥—Ä–Ω", "–≥—Ä–∏–≤–Ω—ã", "–≥—Ä–∏–≤–Ω–∞", "uah"])
    )

    # –°—Ç—Ä–∞–Ω—ã
    dp.register_message_handler(
        countries_handler,
        Trigger(["—Å—Ç—Ä–∞–Ω—ã", "contries", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞", "—Å—Ç—Ä–∞–Ω–∞", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ"]),
    )
    dp.register_message_handler(country_create_handler, Trigger("—Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω—É"))

    # My
    dp.register_message_handler(my_country_handler, Trigger("–º–æ—è —Å—Ç—Ä–∞–Ω–∞"))
    dp.register_message_handler(join_country_handler, Trigger("–∑–∞–π—Ç–∏ –≤ —Å—Ç—Ä–∞–Ω—É"))
    dp.register_message_handler(leave_country_handler, Trigger("–≤—ã–π—Ç–∏ –∏–∑ —Å—Ç—Ä–∞–Ω—ã"))

    # Army
    dp.register_message_handler(army_tech_handler, Trigger("–ê—Ä–º–∏—è —Ç–µ—Ö–Ω–∏–∫–∞"))
    dp.register_message_handler(army_snaraj_handler, Trigger("–ê—Ä–º–∏—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ"))
    dp.register_message_handler(army_rockets_handler, Trigger("–ê—Ä–º–∏—è —Ä–∞–∫–µ—Ç—ã"))
    dp.register_message_handler(army_gotov_handler, Trigger("–ê—Ä–º–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å"))
    dp.register_message_handler(army_handler, Trigger("–∞—Ä–º–∏—è"))

    # –û–≤–Ω–µ—Ä—Å
    dp.register_message_handler(get_country_handler, Trigger("–°—Ç–∞—Ç—å –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º"))
    dp.register_message_handler(leave_from_country_handler, Trigger("–£–π—Ç–∏ –∏–∑ —Å—Ç—Ä–∞–Ω—ã"))
    dp.register_message_handler(snyat_budget_country, Trigger("–°–Ω—è—Ç—å –±—é–¥–∂–µ—Ç"))
    dp.register_message_handler(give_budget_country, Trigger("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç"))

    # Soyuz
    dp.register_message_handler(soyuz_handler, Trigger("–°–æ–∑–¥–∞—Ç—å —Å–æ—é–∑"))
    dp.register_message_handler(cancel_soyuz_handler, Trigger("–†–∞–∑–æ—Ä–≤–∞—Ç—å —Å–æ—é–∑"))

    # War
    dp.register_message_handler(wars_handler, Trigger("–û–±—å—è–≤–∏—Ç—å –≤–æ–π–Ω—É"))
    dp.register_message_handler(wars_handler, Trigger("–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É"))
    dp.register_message_handler(cancel_wars_handler, Trigger('–û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–π–Ω—É'))

    # –ë–æ—Å—Å—ã
    dp.register_message_handler(
        bosses_handler, Trigger(["–±–æ—Å—Å", "–±–æ—Å—Å—ã", "–±–æ—Å—ã", "–±–æ—Å"])
    )

    # Shop
    dp.register_message_handler(users_shop_handler, Trigger(["shop", "—à–æ–ø", "–º–∞–≥–∞–∑–∏–Ω"]))


    # RP
    dp.register_message_handler(
        rp_commands_handler, Trigger(["—Ä–ø"] + list(emojis.keys()))
    )

    # Other
    dp.register_message_handler(time_handler, Trigger(["time", "–≤—Ä–µ–º—è"]))
