import asyncio
import numpy as np
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from keyboard.main import cancel, remove
from states.admins import Rass
from utils.main.users import all_users
from utils.main.chats import all_chats


async def rass_menu_handler(call: CallbackQuery, state: FSMContext):
    await Rass.post.set()
    await state.update_data(action=call.data.split('_')[1])
    return await call.message.answer('üìÉ –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=cancel)


async def rass_step2_handler(message: Message, state: FSMContext):
    await Rass.next()
    await state.update_data(msg=message)
    return await message.answer('üéôÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (name|btn, name|btn\\n) –∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                                reply_markup=cancel)


async def rass_step3_handler(message: Message, state: FSMContext):
    await Rass.next()
    if message.text != '-':
        text = message.text.split('\n')
        lenght = len(text[0].split(','))
        kb = InlineKeyboardMarkup(row_width=lenght)
        for i in text:
            i = i.split(',')
            for z in i:
                name, url = z.split('|')
                kb.insert(InlineKeyboardButton(text=name, url=url))
    else:
        kb = None
    await state.update_data(kb=kb)
    return await message.answer('üìÖ –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ (d.m.Y h:m) –∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                                reply_markup=cancel)


async def rass_finish_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.finish()
    text = message.text
    if text == '-':
        time = '—Å–µ–π—á–∞—Å'
        seconds = 0
    else:
        now = datetime.now()
        if '.' not in text:
            text = f'{now.day}.{now.month}.{now.year} ' + text
        time = datetime.strptime(text, '%d.%m.%Y %H:%M')
        seconds = (time - now).total_seconds()

    await message.answer(text=f'‚ù§Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {time}', reply_markup=remove)

    await asyncio.sleep(seconds)

    part0, part1, part2 = np.array_split(all_users() if data['action'] == 'users' else all_chats(), 3)

    m = await message.answer('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n'
                             '–£—Å–ø–µ—à–Ω–æ: 0\n'
                             '–ù–µ—É—Å–ø–µ—à–Ω–æ: 0')

    index = 0
    allow, decline = 0, 0

    msg = data['msg']
    kb = data['kb']

    for user_id in part0:
        index += 1
        try:
            await msg.send_copy(chat_id=user_id,
                                reply_markup=kb)
            allow += 1
        except:
            decline += 1

    await m.edit_text(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {index}\n'
                      f'–£—Å–ø–µ—à–Ω–æ: {allow}\n'
                      f'–ù–µ—É—Å–ø–µ—à–Ω–æ: {decline}')

    for user_id in part1:
        index += 1
        try:
            await msg.send_copy(chat_id=user_id,
                                reply_markup=kb)
            allow += 1
        except:
            decline += 1

    await m.edit_text(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {index}\n'
                      f'–£—Å–ø–µ—à–Ω–æ: {allow}\n'
                      f'–ù–µ—É—Å–ø–µ—à–Ω–æ: {decline}')

    for user_id in part2:
        index += 1
        try:
            await msg.send_copy(chat_id=user_id,
                                reply_markup=kb)
            allow += 1
        except:
            decline += 1

    await m.edit_text(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {index}\n'
                      f'–£—Å–ø–µ—à–Ω–æ: {allow}\n'
                      f'–ù–µ—É—Å–ø–µ—à–Ω–æ: {decline}\n\n'
                      f'–ó–∞–≤–µ—Ä—à–µ–Ω–æ!')
