import re

from aiogram.types import Message

from config import bot_name
from keyboard.countries import countries_main_kb, country_kb, join_to_country_kb, get_country_kb
from utils.countries import Country, countries, set_country, country_creation_price
from utils.main.cash import to_str
from utils.main.db import sql


async def countries_handler(message: Message):
    arg = message.text.split()[1:] if not bot_name.lower() in message.text.split()[0].lower() else message.text.split()[2:]
    if len(arg) == 0 or arg[0].lower() == '—Å–ø–∏—Å–æ–∫':
        text = 'üè¥‚Äç‚ò†Ô∏è –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ (–ø–æ —Ç–µ—Ä–∏—Ç–æ—Ä–∏–∏) (—Ç–æ–ø 5):\n\n'
        for index, country in Country.get_top(10):
            text += f'{index}. {country.full_name} (<code>{country.territory} –∫–º¬≤</code>) - {country.owner_link}\n'
        text += '\n\n–í–≤–µ–¥–∏—Ç–µ: <code>–°—Ç—Ä–∞–Ω–∞ {–Ω–∞–∑–≤–∞–Ω–∏–µ/–Ω–æ–º–µ—Ä}</code> —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ.\n' \
                '–í–≤–µ–¥–∏—Ç–µ: <code>–°—Ç—Ä–∞–Ω—ã —Å–ø–∏—Å–æ–∫</code> —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω.'
        return await message.reply(text, reply_markup=countries_main_kb, disable_web_page_preview=True)
    elif len(arg) == 1:
        country = Country.find_country(arg[0])
        if country is None:
            return await message.reply('üö´ –°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return await message.reply(country.text, reply_markup=join_to_country_kb(country.name) if country.owner !=
                                                                                               message.from_user.id
        else country_kb if country.owner is not None else get_country_kb(country.name))
    else:
        return await message.reply('üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç.')


def is_flag_emoji(c):
    return "\U0001F1E6\U0001F1E8" <= c <= "\U0001F1FF\U0001F1FC" or c in ["\U0001F3F4\U000e0067\U000e0062\U000e0065"
                                                                          "\U000e006e\U000e0067\U000e007f",
                                                                          "\U0001F3F4\U000e0067\U000e0062\U000e0073"
                                                                          "\U000e0063\U000e0074\U000e007f",
                                                                          "\U0001F3F4\U000e0067\U000e0062\U000e0077"
                                                                          "\U000e006c\U000e0073\U000e007f"]


async def country_create_handler(message: Message):
    country = Country.get_by_user(user_id=message.from_user.id)
    if country is not None:
        return await message.reply('üòê –í—ã —É–∂–µ –∏ —Ç–∞–∫ –≤ –∫–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–µ!\n'
                                   '–í–≤–µ–¥–∏—Ç–µ: <code>–í—ã–π—Ç–∏ –∏–∑ —Å—Ç—Ä–∞–Ω—ã</code> —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Å—Ç—Ä–∞–Ω—ã.')
    arg = message.text.split()[2:]
    if len(arg) == 0:
        return await message.reply('üö´ –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã! <code>(–ü—Ä–∏–º–µ—Ä: –†–∞—Å–µ—èüè≥Ô∏è‚Äçüåà)</code>')

    msg = ' '.join(arg)
    name = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø0-9 ]', '', msg).capitalize()
    if len(name) < 4:
        return await message.reply('üö´ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤.')
    elif len(name) > 20:
        return await message.reply('üö´ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.')
    elif name.count(' ') > 2:
        return await message.reply('üö´ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ 2 –ø—Ä–æ–±–µ–ª–∞.')
    elif name.lower() in [country.name.lower() for country in countries().values()]:
        return await message.reply('üö´ –°—Ç—Ä–∞–Ω–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')

    try:
        emoji = None
        for index, char in enumerate(msg):
            if index+1 >= len(msg):
                break
            if is_flag_emoji(msg[index:index+2]):
                emoji = msg[index:index+2]
                break
        if not emoji:
            return await message.reply('üö´ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —ç–º–æ–¥–∑–∏ —Å—Ç—Ä–∞–Ω—ã.')
    except Exception as ex:
        print(ex)
        return await message.reply('üö´ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —ç–º–æ–¥–∑–∏ —Å—Ç—Ä–∞–Ω—ã.')

    balance = sql.execute(f'SELECT balance FROM users WHERE id = {message.from_user.id}', False, True)[0][0]
    if balance < country_creation_price:
        return await message.reply(f'üòê –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã.\n'
                                   f'–ù—É–∂–Ω–æ: {to_str(country_creation_price)} üí∞')

    src = (None, name, emoji, 0, message.from_user.id, None, f'{message.from_user.id}', 0, None, '0,0,0,False', None,
           None)
    sql.insert_data([src], 'countries')
    sql.edit_data('id', message.from_user.id,
                  'balance', balance - country_creation_price)

    c = Country(sql.select_data(name, 'name', True, 'countries'))

    set_country(c.id, c)

    return await message.reply(f'üòê –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É {c.full_name} –∑–∞ {to_str(country_creation_price)}')
