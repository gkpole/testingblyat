from aiogram.types import Message

from config import bot_name
from keyboard.main import nalogs_all_kb
from utils.logs import writelog
from utils.main.bitcoin import Bitcoin
from utils.main.cash import to_str
from utils.main.moto import Moto
from utils.main.rockets import Rocket
from utils.main.users import User
from utils.main.airplanes import Airplane
from utils.main.businesses import Business
from utils.main.cars import Car
from utils.main.houses import House
from utils.main.tanki import Tank
from utils.main.vertoleti import Vertolet
from utils.main.yaxti import Yaxta
from threading import Lock


lock = Lock()


async def nalogs_handler(message: Message):
    arg = message.text.split()[1:] if not bot_name.lower() in message.text.split()[0].lower() else message.text.split()[2:]
    try:
        business = Business(user_id=message.from_user.id)
    except:
        business = None
    try:
        house = House(user_id=message.from_user.id)
    except:
        house = None
    try:
        car = Car(user_id=message.from_user.id)
    except:
        car = None
    try:
        tank = Tank(user_id=message.from_user.id)
    except:
        tank = None
    try:
        yaxta = Yaxta(user_id=message.from_user.id)
    except:
        yaxta = None
    try:
        vertolet = Vertolet(user_id=message.from_user.id)
    except:
        vertolet = None
    try:
        airplane = Airplane(user_id=message.from_user.id)
    except:
        airplane = None
    try:
        moto = Moto(user_id=message.from_user.id)
    except:
        moto = None
    try:
        rocket = Rocket(user_id=message.from_user.id)
    except:
        rocket = None
    try:
        btc = Bitcoin(owner=message.from_user.id)
    except:
        btc = None

    xd = [business, house, car, tank, yaxta,
                                  vertolet, airplane,
          moto, rocket, btc]
    nalog = sum(i.nalog for i in xd if i)

    if len(arg) == 0:
        return await message.reply(f'üí≤ –í —Å—É–º–º–µ –≤–∞—à–∏ –Ω–∞–ª–æ–≥–∏: {to_str(nalog)}\n\n'
                                   f'–í–≤–µ–¥–∏—Ç–µ: <code>–ù–∞–ª–æ–≥–∏ –æ–ø–ª–∞—Ç–∏—Ç—å</code> —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –≤—Å—ë.',
                                   reply_markup=nalogs_all_kb)

    if nalog <= 0:
        return await message.reply('ü§î –í—Å–µ –Ω–∞–ª–æ–≥–∏ –∏ —Ç–∞–∫ –æ–ø–ª–∞—á–µ–Ω—ã.')

    user = User(user=message.from_user)
    if user.bank < nalog:
        return await message.reply(f'üí≤ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–æ–≤, –Ω—É–∂–Ω–æ: {to_str(nalog)}')

    user.edit('bank', user.bank - nalog)

    for i in xd:
        if i and i.nalog > 0:
            with lock:
                i.edit('nalog', 0)

    await message.reply(f'‚õÑ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –≤—Å–µ –Ω–∞–ª–æ–≥–∏ ( {to_str(nalog)} )')
    await writelog(message.from_user.id, f'–û–ø–ª–∞—Ç–∞ –≤—Å–µ—Ö –Ω–∞–ª–æ–≥–æ–≤')
    return


async def autonalog_handler(message: Message):
    arg = message.text.split()[1:] if not bot_name.lower() in message.text.split()[0].lower() else message.text.split()[2:]
    user = User(user=message.from_user)
    if user.autonalogs:
        x1, x2 = '–í–∫–ª—é—á–µ–Ω—ã ‚òëÔ∏è', '–≤—ã–∫–ª—é—á–∏—Ç—å'
    else:
        x1, x2 = '–í—ã–∫–ª—é—á–µ–Ω—ã üö´', '–≤–∫–ª—é—á–∏—Ç—å'
    if len(arg) == 0:
        return await message.reply(f'üòÉ –í–∞—à —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ-–Ω–∞–ª–æ–≥–æ–≤: <b>{x1}</b>\n'
                                   f'üì¢ –í–≤–µ–¥–∏—Ç–µ: <code>–ê–≤—Ç–æ–Ω–∞–ª–æ–≥–∏ {x2}</code> —á—Ç–æ–±—ã {x2} –∏—Ö.')
    elif arg[0].lower().startswith('–≤–∫–ª'):
        now = True
        x1, x2 = '–í–∫–ª—é—á–µ–Ω—ã ‚òëÔ∏è', '–≤—ã–∫–ª—é—á–∏—Ç—å'
        user.edit('autonalogs', now)
        return await message.reply(f'–ê–≤—Ç–æ-–Ω–∞–ª–æ–≥–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ {x1}\n'
                                   f'üì¢ –í–≤–µ–¥–∏—Ç–µ: <code>–ê–≤—Ç–æ–Ω–∞–ª–æ–≥–∏ {x2}</code> —á—Ç–æ–±—ã {x2} –∏—Ö.')

    elif arg[0].lower().startswith('–≤—ã–∫–ª'):
        now = False
        x1, x2 = '–í—ã–∫–ª—é—á–µ–Ω—ã üö´', '–≤–∫–ª—é—á–∏—Ç—å'
        user.edit('autonalogs', now)
        return await message.reply(f'–ê–≤—Ç–æ-–Ω–∞–ª–æ–≥–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ {x1}\n'
                                   f'üì¢ –í–≤–µ–¥–∏—Ç–µ: <code>–ê–≤—Ç–æ–Ω–∞–ª–æ–≥–∏ {x2}</code> —á—Ç–æ–±—ã {x2} –∏—Ö.')
    else:
        return await message.reply(f'üòÉ –í–∞—à —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ-–Ω–∞–ª–æ–≥–æ–≤: <b>{x1}</b>\n'
                                   f'üì¢ –í–≤–µ–¥–∏—Ç–µ: <code>–ê–≤—Ç–æ–Ω–∞–ª–æ–≥–∏ {x2}</code> —á—Ç–æ–±—ã {x2} –∏—Ö.')
