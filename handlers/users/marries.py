import random
import re
import time
from datetime import datetime

from aiogram.types import Message, CallbackQuery

from config import bot_name
from keyboard.main import marry_kb
from keyboard.marries import marrye_kb
from utils.logs import writelog
from utils.main.cash import get_cash, to_str
from utils.main.db import sql
from utils.main.users import User
from utils.marries import Marry


async def marry_handler(message: Message):
    arg = message.text.split()[1:] if not bot_name.lower() in message.text.split()[0].lower() else message.text.split()[2:]

    try:
        marry = Marry(user_id=message.from_user.id)
    except:
        try:
            marry = Marry(son=message.from_user.id)
        except:
            marry = None

    user = User(id=message.from_user.id)

    if marry is not None:
        if marry.level is None or marry.level == 0:
            marry.level = 1

    if len(arg) == 0 or arg[0].lower() in ['–º–æ–π', '–º–æ—è', '–º–æ—ë']:
        if marry is None:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
        user2 = User(id=marry.user2 if message.from_user.id == marry.user1 else marry.user1)
        user1 = User(id=marry.user2 if user2.id == marry.user1 else marry.user1)

        zams = '\n'.join(f'<code>{index}</code>. {User(id=i).link} üëÆüèº' for index, i in enumerate(marry.zams,
                                                                                                   start=1))
        childs = '\n'.join(f'<code>{index}</code>. {User(id=i).link} üë∂' for index, i in enumerate(marry.childs,
                                                                                                   start=1) if i not
                         in marry.zams)
        lol = datetime.now() - marry.reg_date
        xd = f'{lol.days} –¥–Ω.' if lol.days > 0 else f'{int(lol.total_seconds() // 3600)} —á–∞—Å.' \
            if lol.total_seconds() > 59 else f'{int(lol.seconds)} —Å–µ–∫.'
        text = f'üíç –í–∞—à–∞ —Å–µ–º—å—è ({user1.link} & {user2.link})\n' \
               f'üë§ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{marry.name}</b>\n' \
               f'üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {marry.reg_date} (<code>{xd}</code>)\n' \
               f'üí∞ –ë—é–¥–∂–µ—Ç —Å–µ–º—å–∏: {to_str(marry.balance)}\n' \
               f'üëë LVL: {marry.level}\n' \
               f'üëÆüèº –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏:\n\n{zams if len(zams) > 0 else "–ù–µ—Ç—É"}\n\n' \
               f'üë∂ –î–µ—Ç–∏—à–∫–∏ –≤ –≤–∞—à–µ–π —Å–µ–º—å–µ:\n\n{childs if len(childs) > 0 else "–ù–µ—Ç—É"}'
        return await message.reply(text=text, disable_web_page_preview=True,
                                   reply_markup=marrye_kb)
    elif arg[0].lower() in ['–∑–∞–≤–µ—Å—Ç–∏', '—Å–æ–∑–¥–∞—Ç—å', '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å']:
        if marry and message.from_user.id in [marry.user1, marry.user2]:
            return await message.reply('‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è... –∞—è-—è–π –∏–∑–º–µ–Ω—â–∏–∫(—Ü–∞)!')
        try:
            user2 = User(id=message.reply_to_message.from_user.id) if message.reply_to_message else User(
                username=arg[1].replace('@', ''))
        except:
            return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë—Ä–∞–∫ —Å–æ–∑–¥–∞—Ç—å *{—Å—Å—ã–ª–∫–∞}</code>')

        try:
            Marry(user_id=user2.id)
            return await message.reply(f'‚ùå –û—à–∏–±–∫–∞. –£ {user2.link} —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è!', disable_web_page_preview=True)
        except:
            try:
                await message.bot.send_message(chat_id=user2.id,
                                               text=f'[üíç] {user.link} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –∂–µ–Ω–∏—Ç—å—Å—è!',
                                               reply_markup=marry_kb(user.id, user2.id), disable_web_page_preview=True)
            except:
                return await message.reply(f'‚ùå {user2.link} –Ω–∏—Ä–∞–∑—É –Ω–µ –ø–∏—Å–∞–ª –≤ –ª—Å –±–æ—Ç—É –∏ —è –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –º–æ–≥—É '
                                           '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–∞–¥—å–±—É!')
        return await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ {user2.link} –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è!\n\n–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å –≤ –ª–∏—á–∫–µ –µ—Å–ª–∏ '
                                   '–æ–Ω(–∞) —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è –ø–æ—ç—Ç–æ–º—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-—Ç–æ –≤ –ª—Å @Rabbit_GameBot',
                                   disable_web_page_preview=True)
    elif len(arg) >= 2 and arg[0].lower() in ['–¥–∞—Ç—å', '—Å–¥–µ–ª–∞—Ç—å'] and arg[1].lower() in ['–∑–∞–º–æ–º', '–∑–∞–º–∞']:
        if marry is None:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
        try:
            user2 = User(id=message.reply_to_message.from_user.id) if message.reply_to_message else User(
                username=arg[2].replace('@', ''))
        except:
            return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–°–µ–º—å—è —Å–¥–µ–ª–∞—Ç—å –∑–∞–º–æ–º *{—Å—Å—ã–ª–∫–∞}</code>')

        try:
            if user2.id in [marry.user1, marry.user2] + marry.zams:
                return await message.reply('üòê –≠–¢–û –†–û–î–ò–¢–ï–õ–¨/–ó–ê–ú!')
            x = Marry(son=user2.id)
            if user2.id in x.childs + x.zams and x.id != marry.id:
                return await message.reply(f'‚ùå –û—à–∏–±–∫–∞. –£ {user2.link} —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è –≥–¥–µ –æ–Ω (–∑–∞–º/—Ä–µ–±–µ–Ω–æ–∫)!',
                                           disable_web_page_preview=True)
            raise Exception('123')
        except:
            if user.id in [marry.user1, marry.user2]:
                marry.add_child(user_id=user2.id, status='zam')
            else:
                return await message.reply(f'‚ùå –í—ã –Ω–µ —Ä–æ–¥–∏—Ç–µ–ª—å!')

        await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–º–æ–º {user2.link}', disable_web_page_preview=True)
        await writelog(message.from_user.id, f'–ó–∞–º —Å–µ–º—å–∏ {user2.link}')
        return

    elif len(arg) >= 2 and arg[1].lower() == '–∑–∞–º–∞' and arg[0].lower() in ['—É–±—Ä–∞—Ç—å', '—Å–Ω—è—Ç—å',
                                                                           '—É–¥–∞–ª–∏—Ç—å']:
        if marry is None:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
        if message.from_user.id in [marry.user1, marry.user2]:
            try:
                user2 = User(id=message.reply_to_message.from_user.id) if message.reply_to_message else User(
                    username=arg[2].replace('@', ''))
            except:
                return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–°–µ–º—å—è —É–±—Ä–∞—Ç—å –∑–∞–º–∞ *{—Å—Å—ã–ª–∫–∞}</code>')
            if user2.id in [marry.user1, marry.user2]:
                return await message.reply('‚ùå –≠—Ç–æ –ø–∞–ø–∞ –∏–ª–∏ –º–∞–º–∞!')
            elif user2.id not in marry.zams:
                return await message.reply('üòê –≠—Ç–æ –Ω–µ –∑–∞–º')
            marry.del_child(user2.id, 'zams')
            await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –∑–∞–º–∞ —É {user2.link}',
                                disable_web_page_preview=True)
            await writelog(message.from_user.id, f'–ó–∞–º –∑–∞–±—Ä–∞—Ç—å {user2.link}')
            return
        else:
            return await message.reply('üë∂ –®–∫–µ—Ç, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Å–Ω—è—Ç—å –¥—Ä—É–≥–æ–≥–æ –∑–∞–º–∞!')

    elif arg[0].lower() in ['—É—Å—ã–Ω–æ–≤–∏—Ç—å', '–ø—Ä–∏—é—Ç–∏—Ç—å', '—É–¥–æ—á–µ—Ä–∏—Ç—å', '–≤–∑—è—Ç—å']:
        if marry is None:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
        try:
            user2 = User(id=message.reply_to_message.from_user.id) if message.reply_to_message else User(
                username=arg[1].replace('@', ''))
        except:
            return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–°–µ–º—å—è –ø—Ä–∏—é—Ç–∏—Ç—å *{—Å—Å—ã–ª–∫–∞}</code>')

        try:
            if user2.id in [marry.user1, marry.user2]:
                raise Exception('123')
            Marry(son=user2.id)
            return await message.reply(f'‚ùå –û—à–∏–±–∫–∞. –£ {user2.link} —É–∂–µ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–∏!', disable_web_page_preview=True)
        except:
            if user.id in [marry.user1, marry.user2] + marry.zams:
                marry.add_child(user_id=user2.id)
            else:
                return await message.reply(f'‚ùå –í—ã –Ω–µ —Ä–æ–¥–∏—Ç–µ–ª—å!')

        await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—é—Ç–∏–ª–∏ {user2.link}', disable_web_page_preview=True)
        await writelog(message.from_user.id, f'–ü—Ä–∏—é—á–µ–Ω–∏–µ {user2.link}')
        return

    elif arg[0].lower() in ['–≤—ã–π—Ç–∏', '—Ä–∞–∑–æ—Ä–≤–∞—Ç—å', '—É–¥–∞–ª–∏—Ç—å']:
        if marry is None:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
        if message.from_user.id in [marry.user1, marry.user2]:
            marry.delete()
            await message.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Å–µ–º—å—é! –ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å :(')
            await writelog(message.from_user.id, f'–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–º—å–∏')
            return
        else:
            marry.del_child(message.from_user.id)
            marry.del_child(message.from_user.id, 'zam')
            await message.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ —Å —Å–µ–º—å–∏! –ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å :(')
            await writelog(message.from_user.id, f'–í—ã—Ö–æ–¥ –∏–∑ —Å–µ–º—å–∏')
            return

    elif arg[0].lower() in ['–≤—ã–≥–Ω–∞—Ç—å', '—Ä–∞–∑—Å—ã–Ω–æ–≤–∏—Ç—å', '—Ä–∞–∑–¥–æ—á–µ—Ä–∏—Ç—å']:
        if marry is None:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
        if message.from_user.id in [marry.user1, marry.user2] + marry.zams:
            try:
                user2 = User(id=message.reply_to_message.from_user.id) if message.reply_to_message else User(
                    username=arg[1].replace('@', ''))
            except:
                return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–°–µ–º—å—è –≤—ã–≥–Ω–∞—Ç—å *{—Å—Å—ã–ª–∫–∞}</code>')
            if user2.id in [marry.user1, marry.user2] + marry.zams:
                return await message.reply('‚ùå –≠—Ç–æ –ø–∞–ø–∞ –∏–ª–∏ –º–∞–º–∞, –∏–ª–∏ –∑–∞–º!')
            marry.del_child(user2.id)
            await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≥–Ω–∞–ª–∏ {user2.link} –∏–∑ —Å–≤–æ–µ–π —Å–µ–º—å–∏',
                                disable_web_page_preview=True)
            await writelog(message.from_user.id, f'–í—ã–≥–Ω–∞–Ω–∏–µ {user2.link} –∏–∑ —Å–µ–º—å–∏')
            return
        else:
            return await message.reply('üë∂ –®–∫–µ—Ç, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–≥–Ω–∞—Ç—å —Å–≤–æ–µ–≥–æ –±—Ä–∞—Ç–∞/—Å–µ—Å—Ç—Ä—É!')
    elif arg[0].lower() in ['—Å–Ω—è—Ç—å', '–≤—ã–≤–µ—Å—Ç–∏', '–≤–∑—è—Ç—å']:
        if marry is None:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
        if user.id not in [marry.user1, marry.user2] + marry.zams:
            return await message.reply('‚ùå –í—ã –Ω–µ —Ä–æ–¥–∏—Ç–µ–ª—å/–∑–∞–º, –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –±–∞–±–∫–∏ —Å –±—é–¥–∂–µ—Ç–∞ —Å–µ–º—å–∏!')

        summ = marry.balance
        try:
            summ = get_cash(arg[1])
        except:
            pass

        if summ <= 0:
            return await message.reply('‚ùå –ú–∏–Ω–∏–º—É–º $1')

        elif summ > marry.balance:
            return await message.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É —Å–µ–º—å–∏!')

        sql.executescript(f'UPDATE users SET balance = balance + {summ} WHERE id = {message.from_user.id};\n'
                          f'UPDATE marries SET balance = balance - {summ} WHERE id = {marry.id}',
                          True, False)

        await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {to_str(summ)} —Å –±—é–¥–∂–µ—Ç–∞ —Å–µ–º—å–∏!')
        await writelog(message.from_user.id, f'–°–Ω—è—Ç–∏–µ {to_str(summ)} —Å –±—é–¥–∂–µ—Ç–∞ —Å–µ–º—å–∏')
        return
    elif arg[0].lower() in ['–ø–æ–ª–æ–∂–∏—Ç—å', '–≤–ª–æ–∂–∏—Ç—å', '–ø–æ–ø–æ–ª–Ω–∏—Ç—å', '–¥–∞—Ç—å']:
        if marry is None:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')

        summ = user.balance
        try:
            summ = get_cash(arg[1])
        except:
            pass

        if summ <= 0:
            return await message.reply('‚ùå –ú–∏–Ω–∏–º—É–º $1')

        elif summ > user.balance:
            return await message.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Ä—É–∫–∞—Ö!')

        sql.executescript(f'UPDATE users SET balance = balance - {summ} WHERE id = {message.from_user.id};\n'
                          f'UPDATE marries SET balance = balance + {summ} WHERE id = {marry.id}',
                          True, False)

        await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏ –Ω–∞ +{to_str(summ)}')
        await writelog(message.from_user.id, f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {to_str(summ)} –≤ –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏')
        return
    elif arg[0].lower() in ['–Ω–∞–≥—Ä–∞–¥–∞', '–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', '–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ']:
        if marry.last is not None and (time.time() - marry.last) < 3600:
            return await message.reply('‚åö –í—ã –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–±–∏—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É')

        marry.editmany(last=time.time(),
                       balance=marry.balance + 10000 * marry.level)
        await message.reply(f'üéÑ –í –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{to_str(10000 * marry.level)}')
        await writelog(message.from_user.id, f'–ù–∞–≥—Ä–∞–¥–∞ –≤ –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏')
        return
    elif arg[0].lower() in ['—Å–µ–∫—Å', '—Ç—Ä–∞—Ö–∞—Ç—å', '—Ç—Ä–∞—Ö–∞—Ç—å—Å—è', '—Ç—Ä–∞—Ö–∞–Ω—å–µ']:
        if not marry:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
        if marry.last_sex is not None and (time.time() - marry.last_sex) < 3600:
            return await message.reply('‚åö –í—ã –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —ç—Ç–∏–º –¥–µ–ª–æ–º!')
        elif user.id not in [marry.user1, marry.user2] + marry.zams:
            return await message.reply('üçÅ –®–∫–µ—Ç! –¢—ã –Ω–µ –º–æ–∂–µ—à—å —Ç—Ä–∞—Ö–∞—Ü–∞ —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º.')

        summ = random.randint(5000, 25000 * marry.level)

        marry.editmany(last_sex=time.time(),
                       balance=marry.balance + summ)

        user2 = User(id=marry.user2 if message.from_user.id == marry.user1 else marry.user1)

        await message.reply(f'üéÑ –í—ã –∑–∞–Ω—è–ª–∏—Å—å —Å—ç–∫—Å–æ–º —Å {user2.link} –∏ –≤ –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ '
                            f'+{to_str(summ)}', disable_web_page_preview=True)
        await writelog(message.from_user.id, f'C–µ–∫—Å —Å {user2.link}')
        return
    elif arg[0].lower() in ['—É–ª—É—á—à', '—É–ª—É—á—à–µ–Ω–∏–µ', '—É–ª—É—á—à–∏—Ç—å',
                            '–±—É—Å—Ç', '–∞–ø—Ä–≥–µ–π–¥', '–∞–ø–¥–µ–π—Ç']:
        if not marry:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')

        price = 1000000 * (marry.level + 1)
        if user.balance < price:
            return await message.reply(f'üí≤ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Ä—É–∫–∞—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ–º—å–∏. –ù—É–∂–Ω–æ: {to_str(price)}')

        query = f'UPDATE users SET balance = balance - {price} WHERE id = {user.id};\n' \
                f'UPDATE marries SET level = level + 1 WHERE id = {marry.id};'
        sql.executescript(query=query, commit=True, fetch=False)

        return await message.reply(f'‚úÖ –í—ã —É–ª—É—á—à–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–µ–º—å–∏ –Ω–∞ +1, —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {marry.level + 1}')
    elif arg[0].lower() in ['–Ω–∞–∑–≤–∞—Ç—å', '–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', '–Ω–∏–∫', '–Ω–µ–π–º',
                            '–Ω–∞–∑–≤–∞–Ω–∏–µ']:
        if not marry:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')

        if marry.level < 3:
            return await message.reply('üëë –ù—É–∂–µ–Ω 4 –ª–≤–ª —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏!')

        try:
            name = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø0-9]', '', arg[1])
        except:
            return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë—Ä–∞–∫ –Ω–∞–∑–≤–∞—Ç—å {–Ω–∞–∑–≤–∞–Ω–∏–µ}</code>')
        if len(name) < 4 or len(name) > 16:
            return await message.reply('‚ùå –î–ª–∏–Ω–∞ –±–æ–ª—å—à–µ 16 –∏–ª–∏ –º–µ–Ω—å—à–µ 4. –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã.')

        marry.edit('name', name)

        return await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏ –Ω–∞: <b>{name}</b>')

    else:
        return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã!')


async def marry_call_handler(call: CallbackQuery):
    user1 = int(call.data.split('_')[1])
    try:
        Marry(user_id=user1)
        await call.answer('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–∂–µ–Ω–∏–ª—Å—è')
        return await call.message.delete()
    except:
        pass
    try:
        Marry(user_id=call.from_user.id)
        await call.answer('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–∂–µ–Ω–∏–ª—Å—è')
        return await call.message.delete()
    except:
        pass
    try:
        await call.bot.send_message(chat_id=user1,
                                    text=f'–£—Ä–∞, –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ –∫–æ—Ç–æ—Ä–æ–π'
                                         f' –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏ –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è –ø—Ä–∏–Ω—è–ª–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–∞–¥—å–±—É!')
    except:
        pass
    Marry.create(user1=user1, user2=call.from_user.id)
    await call.answer('–ë—Ä–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
    try:
        await call.message.delete()
    except:
        pass
    await writelog(call.from_user.id, f'–°–≤–∞–¥—å–±–∞ —Å {user1}')
    return
