import random
import time

from aiogram.types import Message

from config import bot_name
from keyboard.jobs import jobs_kb
from utils.jobs.jobs import jobs, levels
from utils.logs import writelog
from utils.main.cash import to_str
from utils.main.db import timetostr
from utils.main.users import User


async def jobs_handler(message: Message):
    user = User(user=message.from_user)
    if user.job_time is None and user.work_time is None:
        user.editmany(job_time=time.time(),
                      work_time=time.time())
    elif user.job_time is None:
        user.edit('job_time', time.time())
    elif user.work_time is None:
        user.edit('work_time', time.time())

    arg = message.text.split()[1:] if not bot_name.lower() in message.text.split()[0].lower() else message.text.split()[2:]

    if len(arg) == 0:
        text = f'' \
               f'–í–∞—à–∞ —Ä–∞–±–æ—Ç–∞: <b>{user.job.name if user.job else "–ù–µ—Ç."}</b>\n' \
               f'–í–∞—à —É—Ä–æ–≤–µ–Ω—å: <b>{user.level_json["name"]} ({user.level})</b>\n' \
               f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' \
               f'üí≤ –î–æ—Ö–æ–¥/—á–∞—Å: {to_str(user.job.doxod if user.job else user.level_json["doxod"])}\n' \
               f'‚åö –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑: (<code>{timetostr(int(user.job_time + 3600*12 - time.time()))}</code>)'

        return await message.reply(text, reply_markup=jobs_kb)

    x = ' '.join(arg)
    if '–≤–∑—è—Ç–∫' in x.lower():
        if user.level <= 1:
            return await message.reply('‚ùå –û—à–∏–±–∫–∞. –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤–∑—è—Ç–æ–∫!')
        elif user.balance < 10000 * (user.level+1):
            return await message.reply(f'üí≤ –í–∞–º –Ω—É–∂–Ω–æ {to_str(10000*(user.level+1))} —á—Ç–æ–±—ã –¥–∞—Ç—å –≤–∑—è—Ç–∫—É!')
        xd = random.randint(1, 10)

        if xd == 5:
            user.editmany(balance=user.balance - 10000 * (user.level + 1),
                          level=user.level - 1)
            name = levels[user.level]["name"] if user.level < 13 else levels[12]['name']
            return await message.reply(f'‚ùå –í–∞—Å –ø–æ–π–º–∞–ª–∏ —Å –ø–æ–ª–∏—á–Ω—ã–º –∏ –≤—ã –±—ã–ª–∏ –ø–æ–Ω–∏–∂–µ–Ω—ã –¥–æ <b>{name} ({user.level})</b>\n'
                                       f'–° –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ: -{to_str(10000 * (user.level + 1))}')
        user.editmany(balance=user.balance - 10000 * (user.level + 1),
                      level=user.level+1)
        name = levels[user.level]["name"] if user.level < 13 else levels[12]['name']
        await message.reply(f'‚úÖ –í—ã –ø–æ–≤—ã—Å–∏–ª–∏—Å—å –¥–æ —É—Ä–æ–≤–Ω—è <b>{name} ({user.level})</b>\n–° –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ: -{to_str(10000 * (user.level + 1))}')
        await writelog(message.from_user.id, f'–í–∑—è—Ç–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ')
        return
    elif arg[0]:
        if len(arg) >= 2:
            if user.level < 12:
                return await message.reply(f'üïØÔ∏è –í–∞—à —É—Ä–æ–≤–µ–Ω—å <b>{user.level_json["name"]} ({user.job_index})</b>, –∞ –Ω—É–∂–µ–Ω:'
                                           f' <b>–ñ–∏–∑–Ω—å ‚ù§Ô∏è‚Äçü©π (12)</b>')
            try:
                number = int(arg[1])
                if number <= 0 or number > len(jobs):
                    raise Exception('123')
            except:
                return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏!')

            job = jobs[number]
            if job['level'] > user.level:
                return await message.reply(f'‚ùå –í–∞—à —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏! –ù—É–∂–µ–Ω: {job["level"]}')

            user.edit('job_index', number)
            await message.reply(f'üïØÔ∏è –í—ã —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É: <b>{job["name"]}</b> –∏ —Ç–µ–ø–µ—Ä—å –≤–∞—à –¥–æ—Ö–æ–¥ '
                                       f'{to_str(job["doxod"])}')
            await writelog(message.from_user.id, f'–°–º–µ–Ω–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ {job["name"]}')
            return
        else:
            text = 'üë®‚Äçü¶≥ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π:\n' \
                   '<i>–ù–æ–º–µ—Ä. –ù–∞–∑–≤–∞–Ω–∏–µ (–ª–≤–ª) - –¥–æ—Ö–æ–¥</i>\n\n'
            for index, job in jobs.items():
                text += f'<code>{index}</code>. {job["name"]} ({job["level"]}) - {job["doxod"]}\n'

            return await message.reply(text=text)
