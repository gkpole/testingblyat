import random

from aiogram.types import Message

from config import bot_name
from keyboard.games import play_roulette_kb
from keyboard.generate import show_balance_kb
from utils.logs import writelog
from utils.main.cash import to_str, get_cash
from utils.main.users import User


async def roulette_handler(message: Message):
    arg = message.text.split()[1:] if not bot_name.lower() in message.text.split()[0].lower() else message.text.split()[2:]
    if len(arg) < 3 or arg[1].lower() not in ["red", "green", 'black',
                                                                      "–∫—Ä–∞—Å–Ω—ã–π", "–∑–µ–ª–µ–Ω—ã–π",
                                                                      '–∑–µ–ª—ë–Ω—ã–π', '—á–µ—Ä–Ω—ã–π', "—á—ë—Ä–Ω—ã–π",
                                                                      '‚ö´', 'üî¥', 'üü¢'] or \
            not arg[2].isdigit() or int(arg[2]) <= 0 or int(arg[2]) > 100:
        return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–†—É–ª–µ—Ç–∫–∞ {—Å—Ç–∞–≤–∫–∞} {—Ü–≤–µ—Ç ("red", "green", '
                                   '"black")} {—á–∏—Å–ª–æ –¥–æ 100}</code>')
    color = {
        "–∫—Ä–∞—Å–Ω—ã–π": "üî¥",
        "–∑–µ–ª—ë–Ω—ã–π": 'üü¢',
        '–∑–µ–ª–µ–Ω—ã–π': 'üü¢',
        '—á—ë—Ä–Ω—ã–π': '‚ö´',
        '—á–µ—Ä–Ω—ã–π': '‚ö´',
        'red': 'üî¥',
        'green': 'üü¢',
        'black': '‚ö´'
    }.get(arg[1].lower())
    if color is None:
        return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–†—É–ª–µ—Ç–∫–∞ {—Å—Ç–∞–≤–∫–∞} {—Ü–≤–µ—Ç ("red", "green", '
                                   '"black")} {—á–∏—Å–ª–æ –¥–æ 100}</code>')

    user = User(user=message.from_user)

    try:
        summ = get_cash(arg[0] if arg[0].lower() not in ['–≤—Å—ë', '–≤—Å–µ'] else str(user.balance))
    except:
        summ = 0
    if summ <= 0:
        return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–†—É–ª–µ—Ç–∫–∞ {—Å—Ç–∞–≤–∫–∞} {—Ü–≤–µ—Ç ("red", "green", '
                                   '"black")} {—á–∏—Å–ª–æ –¥–æ 100}</code>')

    if user.balance < summ:
        return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Ä—É–∫–∞—Ö –¥–ª—è —Å—Ç–∞–≤–∫–∏ üí∏',
                                   reply_markup=show_balance_kb)

    index = int(arg[2])

    game_index, game_color = random.randint(1, 100), random.choices('‚ö´üü¢üî¥', weights=(50, 1, 50))[0]
    if game_color != color:
        user.edit('balance', user.balance - summ)
        await message.reply(f'üòñ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞–º –≤—ã–ø–∞–ª–æ {game_index}{game_color}!',
                            reply_markup=play_roulette_kb)
        await writelog(message.from_user.id, f'–†—É–ª–µ—Ç–∫–∞ –∏ –ø—Ä–æ–∏–≥—Ä—ã—à')
        return
    else:
        result = abs(index - game_index)
        win = int((summ * 2) * float(f'0.{result}'))
        user.edit('balance', user.balance + win - summ)
        await message.reply(f'–í–∞–º –≤—ã–ø–∞–ª–æ {game_index}{game_color} –∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ +{to_str(win)}',
                            reply_markup=play_roulette_kb)
        await writelog(message.from_user.id, f'–†—É–ª–µ—Ç–∫–∞ –∏ –≤—ã–∏–≥—Ä—ã—à')
        return
